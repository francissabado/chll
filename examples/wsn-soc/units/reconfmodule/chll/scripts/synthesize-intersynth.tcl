#!yosys
#
# Synthesize the module generated by InterSynth
#
# This file is executed through FlowCmd.
#
# Required Environment Variables:
#   TODO
#

# remove the following two lines
#puts "ERROR: You have to edit this file [info script] before executing."
#exit 1

# library for ABC to map to, if you don't have a library set this variable to
# an empty string, then a simple Yosys internal library will be used
set LIBERTY "/path/to/ams/hitkit/3.80/liberty/c35_3.3V/c35_CORELIB_TYP.lib"

# select better optimization but longer runtime
set MUX_UNDEF "-mux_undef"
#set MUX_UNDEF ""

# Problem: using "-mux_undef" reduces the total cell count after ABC from
# approx. 12,000 down to approx. 11,000, but increases (!) the longest path
# from approx. 3200ns to 5300ns. It seems that ABC is way better in handling
# 'x' values of the MUX tree.

##############################################################################

# get data from outside this script
set INTERSYNTH_VLOG     "$env(INTERSYNTH_VLOG)"
set RECONF_BASE         "$env(RECONF_BASE)"
set CELLLIB_FILE        "$env(CELLLIB_FILE)"
set INTERCONNECT_ILANG  "$env(INTERCONNECT_ILANG)"
set INTERCONNECT_VLOG   "$env(INTERCONNECT_VLOG)"

set StatsFile "$RECONF_BASE/chll/out/interconnect-stats.txt"
set TOP_MODULE "MyInterSynthModule"    ;# TODO: better use FlowProc's "get_reconf_module -istypename"

# setup TCL commands to be equal to the yosys commands (except "proc" -> "procs")
yosys -import

# read the module generated by InterSynth
read_verilog "$INTERSYNTH_VLOG"

# replace CONST_* cells by their (nearly empty) implementation
techmap -map "${RECONF_BASE}/chll/out/presilicon-stdcells.v"
opt_clean

# read cell library and TRFSM wrappers
read_ilang "${CELLLIB_FILE}"
source "${RECONF_BASE}/chll/out/trfsm-cells.tcl"
foreach TRFSM $TRFSMShortNames {
  set TRFSM_LC [string tolower "$TRFSM"]
  read_ilang "${RECONF_BASE}/chll/out/${TRFSM_LC}-wrapper.il"
}

# expose all ports of the instances as top-level ports and remove instances;
# The "expose" pass would also expose all internal wires of the module, which
# we don't want. Using the "-dff" switch only exposes internal wires directly
# driven by D-FF. Since we don't have any D-FF in the design, this effectively
# disables exposing internal wires.
expose -dff -evert "$TOP_MODULE"

# remove all modules again, only top module should stay
hierarchy -top "$TOP_MODULE"

#opt_const -undriven

# ok, at this point we have a module which only contains the interconnect

design -save "Evert"

# procs not required

# optimize circuit
opt -mux_bool $MUX_UNDEF

# map all internal cells ($eq, $bu0, $mux, $or --> $_INV_, $_MUX_, $_OR_, $_XOR_)
techmap

# optimize again
opt -mux_bool $MUX_UNDEF

# map and optimize gate library
if {"$LIBERTY" == ""} {
  abc
} else {
  abc -liberty "$LIBERTY" -script "+strash; scorr -v; ifraig -v; retime -v; strash; dch -vf; map -v; print_gates; print_stats; print_fanio"
}

# optimize again
opt -mux_bool $MUX_UNDEF

# save the optimized module
design -save "Optimized"

# get the copy of the un-optimized module as "NonOpt"
design -copy-from "Evert" -as "NonOpt" "$TOP_MODULE"

if {"$MUX_UNDEF" != ""} {
  # We need a more complex comparison of outputs if MUXes with 'x' values were
  # optimized. This doesn't require the "-enable_undef" option for the "sat"
  # pass.
  miter -equiv -make_assert -make_outputs -ignore_gold_x "NonOpt" "$TOP_MODULE" "miter"
} else {
  miter -equiv -make_assert -make_outputs "NonOpt" "$TOP_MODULE" "miter"
}

if {"$LIBERTY" != ""} {
  read_liberty -ignore_miss_func -ignore_miss_dir "$LIBERTY"
}
flatten "miter"
hierarchy -top "miter"
sat -prove-asserts -verify -show-inputs -show-outputs -max 10 "miter"
# we don't need -enable_undef here because we assume all inputs have defined values
delete "miter"

# reset the current design (used for equivalence checking) and load the
# optimized module
design -load "Optimized"

write_ilang   "$INTERCONNECT_ILANG"
write_verilog "$INTERCONNECT_VLOG"

# print number of cells and wires
tee -o "$StatsFile" stat "$TOP_MODULE"

puts ""
puts "################################################################################"
puts "## Interconnect Statistics ($StatsFile):"
set handle [open "$StatsFile" r]
puts [read $handle]
close $handle
puts ""
