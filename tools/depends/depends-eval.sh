#!/bin/bash
#
# Determine dependencies from design flow
#
# Use this script after depends-trace.sh to evaluate the traces it generated.
# Here we determine input and output files for each step. These are used as
# dependencies and targets for a Makefile.
#
# TODO: Some files are opened using relative paths (esp. the "pdflatex" output
# PDF file). These can't be used for the Makefile. Following all directory
# changes is too cumbersome at the moment.
# Probably "strace" can do that for us:
#   -y -- print paths associated with file descriptor arguments
# Unfortunately this doesn't help with the open() calls (which we use) but only
# adds the path to all following calls like fstat(), read(), write(), close().
# On June 16th, 2014, a patch was submitted to strace which adds 
#   -yy -- print absolute paths instead of relative paths everywhere
# https://www.mail-archive.com/strace-devel@lists.sourceforge.net/msg03965.html
# but this is not yet available as an "strace" .deb and I couldn't test that.

# source setup and configuration
SCRIPT_BASE="$(dirname $0)"
source "$SCRIPT_BASE/depends-common.inc.sh"

# check output directory
if [ ! -d "$TRACE_DIR" ] ; then
  echo "Error: Trace directory $TRACE_DIR doesn't exist"
  exit 1
fi

MAKEFILE=Makefile

cat << EOF > $MAKEFILE
# Makefile to build the reconfigurable module
#
# Auto-generated by $0
#

.PHONY: help all alltargets clean mrproper
MAKEFLAGS += --no-builtin-rules

help:
	@echo "Use this Makefile to regenerate the reconfigurable logic (and nothing more!)"
	@echo "  make help            print this information"
	@echo "  make --dry-run all   view necessary steps[1]"
	@echo "  make all             rebuild reconfigurable module (if necessary)[2]"
	@echo "  make mrproper        remove all generated files"
	@echo ""
	@echo "[1] This will show many steps multiple times. When really using \"make all\","
	@echo "make will re-evaluate the dates of the targets and find out that one step"
	@echo "already has updated these files. Therefore it will not run e.g."
	@echo "\"flowcmd intersynth\" multiple times."
	@echo ""
	@echo "[2] The executed targets are logged to /tmp/make.txt."
	@echo ""

# postpone list of all targets to the end of this Makefile
all: alltargets

EOF

for i in $(echo $TRACE_DIR/*.strace | sort ) ; do
  BASENAME=$(basename $i .strace)
  echo "### $BASENAME ####"
  echo >> $MAKEFILE
  DIRNAME=$(dirname $i)
  BASE_FILE="$DIRNAME/$BASENAME"
  CLEAN_FILE="$BASE_FILE.filtered"
  TARGETS_FILE="$BASE_FILE.targets"
  REQUISITES_FILE="$BASE_FILE.requisites"
  RENAMES_FILE="$BASE_FILE.renames"
  CMD_FILE="$BASE_FILE.sh"
  # remove all files we are not interested in
  egrep -v '(ENOENT|/lib/|/etc/|/dev/|/usr/|/proc/|/tmp/|/var/|_history|\+\+\+|---|execve|\.log|\.aux|\.cache|\.fonts)' $i > $CLEAN_FILE
  # determine input and output files
  sed -nr '/open.*O_RDONLY/s/^.*"(.*)".*$/\1/p' $CLEAN_FILE | sort -u > $REQUISITES_FILE.1
  sed -nr '/open.*O_CREAT/s/^.*"(.*)".*$/\1/p'  $CLEAN_FILE | sort -u > $TARGETS_FILE
  # remove circular dependencies
  grep -v -f $TARGETS_FILE $REQUISITES_FILE.1 > $REQUISITES_FILE
  rm $REQUISITES_FILE.1
  # remove relative paths
  grep -v '^/' $REQUISITES_FILE > $REQUISITES_FILE.relpath
  if [ -s $REQUISITES_FILE.relpath ] ; then
    echo "Warning: Can't use files with relative paths as requisites"
    cat $REQUISITES_FILE.relpath
    # remove files with relative paths
    grep '^/' $REQUISITES_FILE > $REQUISITES_FILE.abspath
    mv $REQUISITES_FILE.abspath $REQUISITES_FILE
  else
    rm $REQUISITES_FILE.relpath
  fi
  grep -v '^/' $TARGETS_FILE > $TARGETS_FILE.relpath
  if [ -s $TARGETS_FILE.relpath ] ; then
    echo "Warning: Can't use files with relative paths as targets"
    cat $TARGETS_FILE.relpath
    # remove files with relative paths
    grep '^/' $TARGETS_FILE > $TARGETS_FILE.abspath
    mv $TARGETS_FILE.abspath $TARGETS_FILE
  else
    rm $TARGETS_FILE.relpath
  fi
  # handle "rename()s": let sed create a sed script :-)
  sed -nr '/rename/s/^.*rename\("(.*)", "(.*)".*$/s#\1#\2#/p' $CLEAN_FILE > $RENAMES_FILE
  if [ -s $RENAMES_FILE ] ; then    # file exists and has a size greater than zero
    # apply this sed script
    sed -i -f $RENAMES_FILE $TARGETS_FILE
  else
    rm $RENAMES_FILE
  fi
  # determine number of requisites and targets
  NUM_REQUISITES=$(wc -l $REQUISITES_FILE | cut -d' ' -f 1)
  NUM_TARGETS=$(wc -l $TARGETS_FILE | cut -d' ' -f 1)
  if [ $NUM_TARGETS -eq 0 ] ; then
    echo "    $BASENAME resulted in 0 targets"
    echo "### $BASENAME resulted in 0 targets" >> $MAKEFILE
    continue
  fi
  # Create Makefile rule. When using multiple targets, Make still thinks that
  # the recipie has to be executed for each outdated target. Therefore we
  # introduce a bad hack: Use a dedicated rule for every target and utilize
  # that Make re-evaluates the dates of the involved files before executing the
  # next rule.
  echo "### $BASENAME" >> $MAKEFILE
  echo >> $MAKEFILE
  for TARGET in $(cat $TARGETS_FILE) ; do
    # target: requisite1 requisite2 ...
    echo -n "$TARGET: " >> $MAKEFILE
    tr "\n" " " < $REQUISITES_FILE >> $MAKEFILE
    echo >> $MAKEFILE
    # convert CMD_FILE to a one-liner concatenated by '&&'
    echo -en "\t@echo $BASENAME: \$@ >> /tmp/make.txt" >> $MAKEFILE
    sed -r 's/#.*$//' $CMD_FILE | grep -v '^$' | sed -r 's/^/ \&\& /' | tr -d "\n" >> $MAKEFILE
    #sed -r "s/^/\t@echo /" $CMD_FILE >> $MAKEFILE
    echo >> $MAKEFILE
  done
done

# create list of all targets which are no other requisites
cat $TRACE_DIR/*.requisites | sort -u > $TRACE_DIR/requisites.txt
cat $TRACE_DIR/*.targets    | sort -u > $TRACE_DIR/targets.txt
grep -v -f $TRACE_DIR/requisites.txt $TRACE_DIR/targets.txt > $TRACE_DIR/top-targets.txt
# append last rule which summarizes all targets
echo -n "alltargets: " >> $MAKEFILE
tr "\n" " " < $TRACE_DIR/top-targets.txt >> $MAKEFILE 
echo >> $MAKEFILE

cat << EOF >> $MAKEFILE

# avoid accidential removal of results by disabling "make clean".
clean:
	@echo "Please use \"make mrproper\" instead."

mrproper:
	@echo "Removing all target files."
EOF
echo -en "\t@rm -rf " >> $MAKEFILE
tr "\n" " " < $TRACE_DIR/targets.txt >> $MAKEFILE 
echo >> $MAKEFILE

# for "flowcmd commit-pre-si" we need targets.txt
cp $TARGETS_FILE .

