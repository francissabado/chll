/* Generated by Yosys 0.3.0+ (git sha1 3b52121) */

(* src = "../../verilog/addsubcmp.v:1" *)
module AddSubCmp(AddOrSub_i, A_i, B_i, D_o, Carry_i, Carry_o, Zero_o, Sign_o, Overflow_o);
  (* src = "../../verilog/addsubcmp.v:33" *)
  wire [16:0] \$add$../../verilog/addsubcmp.v:33$7_Y ;
  (* src = "../../verilog/addsubcmp.v:42" *)
  wire \$eq$../../verilog/addsubcmp.v:42$11_Y ;
  (* src = "../../verilog/addsubcmp.v:42" *)
  wire \$ne$../../verilog/addsubcmp.v:42$12_Y ;
  (* src = "../../verilog/addsubcmp.v:30" *)
  wire [15:0] \$not$../../verilog/addsubcmp.v:30$2_Y ;
  (* src = "../../verilog/addsubcmp.v:31" *)
  wire \$not$../../verilog/addsubcmp.v:31$5_Y ;
  (* src = "../../verilog/addsubcmp.v:23" *)
  wire [16:0] A;
  (* intersynth_conntype = "Word" *)
  (* src = "../../verilog/addsubcmp.v:7" *)
  input [15:0] A_i;
  (* intersynth_conntype = "Bit" *)
  (* src = "../../verilog/addsubcmp.v:5" *)
  input AddOrSub_i;
  (* src = "../../verilog/addsubcmp.v:24" *)
  wire [16:0] B;
  (* intersynth_conntype = "Word" *)
  (* src = "../../verilog/addsubcmp.v:9" *)
  input [15:0] B_i;
  (* src = "../../verilog/addsubcmp.v:26" *)
  wire Carry;
  (* intersynth_conntype = "Bit" *)
  (* src = "../../verilog/addsubcmp.v:13" *)
  input Carry_i;
  (* intersynth_conntype = "Bit" *)
  (* src = "../../verilog/addsubcmp.v:15" *)
  output Carry_o;
  (* src = "../../verilog/addsubcmp.v:27" *)
  wire [15:0] D;
  (* intersynth_conntype = "Word" *)
  (* src = "../../verilog/addsubcmp.v:11" *)
  output [15:0] D_o;
  (* intersynth_conntype = "Bit" *)
  (* src = "../../verilog/addsubcmp.v:21" *)
  output Overflow_o;
  (* src = "../../verilog/addsubcmp.v:25" *)
  wire [16:0] Result;
  (* intersynth_conntype = "Bit" *)
  (* src = "../../verilog/addsubcmp.v:19" *)
  output Sign_o;
  (* intersynth_conntype = "Bit" *)
  (* src = "../../verilog/addsubcmp.v:17" *)
  output Zero_o;
  (* src = "../../verilog/addsubcmp.v:33" *)
  \$add  #(
    .A_SIGNED(32'b00000000000000000000000000000000),
    .A_WIDTH(32'b00000000000000000000000000010001),
    .B_SIGNED(32'b00000000000000000000000000000000),
    .B_WIDTH(32'b00000000000000000000000000010001),
    .Y_WIDTH(32'b00000000000000000000000000010001)
  ) \$add$../../verilog/addsubcmp.v:33$7  (
    .A({ 1'b0, A_i }),
    .B(B),
    .Y(\$add$../../verilog/addsubcmp.v:33$7_Y )
  );
  (* src = "../../verilog/addsubcmp.v:33" *)
  \$add  #(
    .A_SIGNED(32'b00000000000000000000000000000000),
    .A_WIDTH(32'b00000000000000000000000000010001),
    .B_SIGNED(32'b00000000000000000000000000000000),
    .B_WIDTH(32'b00000000000000000000000000000001),
    .Y_WIDTH(32'b00000000000000000000000000010001)
  ) \$add$../../verilog/addsubcmp.v:33$8  (
    .A(\$add$../../verilog/addsubcmp.v:33$7_Y ),
    .B(Carry),
    .Y({ Carry_o, D })
  );
  (* src = "../../verilog/addsubcmp.v:39" *)
  \$eq  #(
    .A_SIGNED(32'b00000000000000000000000000000000),
    .A_WIDTH(32'b00000000000000000000000000010000),
    .B_SIGNED(32'b00000000000000000000000000000000),
    .B_WIDTH(32'b00000000000000000000000000010000),
    .Y_WIDTH(32'b00000000000000000000000000000001)
  ) \$eq$../../verilog/addsubcmp.v:39$9  (
    .A(D),
    .B(16'b0000000000000000),
    .Y(Zero_o)
  );
  (* src = "../../verilog/addsubcmp.v:42" *)
  \$eq  #(
    .A_SIGNED(32'b00000000000000000000000000000000),
    .A_WIDTH(32'b00000000000000000000000000000001),
    .B_SIGNED(32'b00000000000000000000000000000000),
    .B_WIDTH(32'b00000000000000000000000000000001),
    .Y_WIDTH(32'b00000000000000000000000000000001)
  ) \$eq$../../verilog/addsubcmp.v:42$11  (
    .A(A_i[15]),
    .B(B[15]),
    .Y(\$eq$../../verilog/addsubcmp.v:42$11_Y )
  );
  (* src = "../../verilog/addsubcmp.v:42" *)
  \$logic_and  #(
    .A_SIGNED(32'b00000000000000000000000000000000),
    .A_WIDTH(32'b00000000000000000000000000000001),
    .B_SIGNED(32'b00000000000000000000000000000000),
    .B_WIDTH(32'b00000000000000000000000000000001),
    .Y_WIDTH(32'b00000000000000000000000000000001)
  ) \$logic_and$../../verilog/addsubcmp.v:42$13  (
    .A(\$eq$../../verilog/addsubcmp.v:42$11_Y ),
    .B(\$ne$../../verilog/addsubcmp.v:42$12_Y ),
    .Y(Overflow_o)
  );
  (* src = "../../verilog/addsubcmp.v:42" *)
  \$ne  #(
    .A_SIGNED(32'b00000000000000000000000000000000),
    .A_WIDTH(32'b00000000000000000000000000000001),
    .B_SIGNED(32'b00000000000000000000000000000000),
    .B_WIDTH(32'b00000000000000000000000000000001),
    .Y_WIDTH(32'b00000000000000000000000000000001)
  ) \$ne$../../verilog/addsubcmp.v:42$12  (
    .A(D[15]),
    .B(A_i[15]),
    .Y(\$ne$../../verilog/addsubcmp.v:42$12_Y )
  );
  (* src = "../../verilog/addsubcmp.v:30" *)
  \$not  #(
    .A_SIGNED(32'b00000000000000000000000000000000),
    .A_WIDTH(32'b00000000000000000000000000010000),
    .Y_WIDTH(32'b00000000000000000000000000010000)
  ) \$not$../../verilog/addsubcmp.v:30$2  (
    .A(B_i),
    .Y(\$not$../../verilog/addsubcmp.v:30$2_Y )
  );
  (* src = "../../verilog/addsubcmp.v:31" *)
  \$not  #(
    .A_SIGNED(32'b00000000000000000000000000000000),
    .A_WIDTH(32'b00000000000000000000000000000001),
    .Y_WIDTH(32'b00000000000000000000000000000001)
  ) \$not$../../verilog/addsubcmp.v:31$5  (
    .A(Carry_i),
    .Y(\$not$../../verilog/addsubcmp.v:31$5_Y )
  );
  (* src = "../../verilog/addsubcmp.v:30" *)
  \$mux  #(
    .WIDTH(32'b00000000000000000000000000010001)
  ) \$ternary$../../verilog/addsubcmp.v:30$3  (
    .A({ 1'b0, B_i }),
    .B({ 1'b0, \$not$../../verilog/addsubcmp.v:30$2_Y  }),
    .S(AddOrSub_i),
    .Y(B)
  );
  (* src = "../../verilog/addsubcmp.v:31" *)
  \$mux  #(
    .WIDTH(32'b00000000000000000000000000000001)
  ) \$ternary$../../verilog/addsubcmp.v:31$6  (
    .A(Carry_i),
    .B(\$not$../../verilog/addsubcmp.v:31$5_Y ),
    .S(AddOrSub_i),
    .Y(Carry)
  );
  assign A = { 1'b0, A_i };
  assign D_o = D;
  assign Result = { Carry_o, D };
  assign Sign_o = D[15];
endmodule
